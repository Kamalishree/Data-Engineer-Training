 PART 1: Create Collections
use bookstoreDB

db.createCollection("books")
db.createCollection("customers")
db.createCollection("orders")

PART 2: Insert Sample Data
db.books.insertMany([
  { book_id: 101, title: "The AI Revolution", author: "Ray Kurzweil", genre: "Technology", price: 799, stock: 20 },
  { book_id: 102, title: "Mystery of the Manor", author: "Agatha Christie", genre: "Mystery", price: 450, stock: 15 },
  { book_id: 103, title: "Love in the Air", author: "Nora Roberts", genre: "Romance", price: 620, stock: 10 },
  { book_id: 104, title: "Space Odyssey", author: "Arthur C. Clarke", genre: "Sci-Fi", price: 900, stock: 8 },
  { book_id: 105, title: "The Startup Way", author: "Eric Ries", genre: "Business", price: 550, stock: 12 }
])

db.customers.insertMany([
  { customer_id: 201, name: "Anjali Rao", email: "anjali@example.com", city: "Hyderabad" },
  { customer_id: 202, name: "Ravi Kumar", email: "ravi@example.com", city: "Chennai" },
  { customer_id: 203, name: "Neha Singh", email: "neha@example.com", city: "Hyderabad" },
  { customer_id: 204, name: "Amit Patel", email: "amit@example.com", city: "Mumbai" },
  { customer_id: 205, name: "Divya Mehta", email: "divya@example.com", city: "Bangalore" }
])

db.orders.insertMany([
  { order_id: 301, customer_id: 201, book_id: 101, order_date: ISODate("2023-03-10"), quantity: 2 },
  { order_id: 302, customer_id: 202, book_id: 103, order_date: ISODate("2023-04-22"), quantity: 1 },
  { order_id: 303, customer_id: 203, book_id: 104, order_date: ISODate("2023-02-05"), quantity: 3 },
  { order_id: 304, customer_id: 204, book_id: 102, order_date: ISODate("2022-12-15"), quantity: 1 },
  { order_id: 305, customer_id: 205, book_id: 105, order_date: ISODate("2023-06-01"), quantity: 4 },
  { order_id: 306, customer_id: 201, book_id: 104, order_date: ISODate("2023-05-09"), quantity: 1 },
  { order_id: 307, customer_id: 203, book_id: 103, order_date: ISODate("2023-07-14"), quantity: 2 }
])

 PART 3: Queries

1. Books priced above 500
db.books.find({ price: { $gt: 500 } })

2. Customers from Hyderabad
db.customers.find({ city: "Hyderabad" })

3. Orders after Jan 1, 2023
db.orders.find({ order_date: { $gt: ISODate("2023-01-01") } })

4. Order details with customer name and book title
db.orders.aggregate([
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "customer_id",
      as: "customer_info"
    }
  },
  {
    $lookup: {
      from: "books",
      localField: "book_id",
      foreignField: "book_id",
      as: "book_info"
    }
  },
  {
    $project: {
      order_id: 1,
      order_date: 1,
      quantity: 1,
      customer_name: { $arrayElemAt: ["$customer_info.name", 0] },
      book_title: { $arrayElemAt: ["$book_info.title", 0] }
    }
  }
])

5. Total quantity ordered for each book
db.orders.aggregate([
  {
    $group: {
      _id: "$book_id",
      total_quantity: { $sum: "$quantity" }
    }
  }
])

6. Total orders by each customer
db.orders.aggregate([
  {
    $group: {
      _id: "$customer_id",
      total_orders: { $sum: 1 }
    }
  }
])

7. Total revenue per book
db.orders.aggregate([
  {
    $lookup: {
      from: "books",
      localField: "book_id",
      foreignField: "book_id",
      as: "book_info"
    }
  },
  {
    $unwind: "$book_info"
  },
  {
    $group: {
      _id: "$book_id",
      book_title: { $first: "$book_info.title" },
      total_revenue: { $sum: { $multiply: ["$quantity", "$book_info.price"] } }
    }
  }
])
8. Book with highest revenue
db.orders.aggregate([
  {
    $lookup: {
      from: "books",
      localField: "book_id",
      foreignField: "book_id",
      as: "book_info"
    }
  },
  { $unwind: "$book_info" },
  {
    $group: {
      _id: "$book_id",
      title: { $first: "$book_info.title" },
      revenue: { $sum: { $multiply: ["$quantity", "$book_info.price"] } }
    }
  },
  { $sort: { revenue: -1 } },
  { $limit: 1 }
])

9. Total books sold by genre
db.orders.aggregate([
  {
    $lookup: {
      from: "books",
      localField: "book_id",
      foreignField: "book_id",
      as: "book_info"
    }
  },
  { $unwind: "$book_info" },
  {
    $group: {
      _id: "$book_info.genre",
      total_sold: { $sum: "$quantity" }
    }
  }
])

10. Customers who ordered more than 2 different books
db.orders.aggregate([
  {
    $group: {
      _id: { customer_id: "$customer_id", book_id: "$book_id" }
    }
  },
  {
    $group: {
      _id: "$_id.customer_id",
      distinct_books: { $sum: 1 }
    }
  },
  {
    $match: { distinct_books: { $gt: 2 } }
  }
])





