
books
db.books.insertMany([
{ book_id: 201, title: "The Alchemist", author: "Paulo Coelho", genre: "Fiction",
copies: 10 },
{ book_id: 202, title: "Atomic Habits", author: "James Clear", genre: "Self-Help",
copies: 5 },
{ book_id: 203, title: "Sapiens", author: "Yuval Noah Harari", genre: "History",
copies: 7 },
{ book_id: 204, title: "The Lean Startup", author: "Eric Ries", genre: "Business",
copies: 3 },
{ book_id: 205, title: "Deep Work", author: "Cal Newport", genre: "Productivity",
copies: 4 }
])
2
members
db.members.insertMany([
{ member_id: 101, name: "Ayesha Khan", joined_on: new Date("2024-01-15") },
{ member_id: 102, name: "Rahul Verma", joined_on: new Date("2024-03-12") },
{ member_id: 103, name: "Nikita Rao", joined_on: new Date("2024-04-10") }
])
3
borrowed
db.borrowed.insertMany([
{ borrow_id: 1, member_id: 101, book_id: 201, date: new Date("2024-06-01"),
returned: true },
{ borrow_id: 2, member_id: 101, book_id: 203, date: new Date("2024-06-15"),
returned: false },
{ borrow_id: 3, member_id: 102, book_id: 202, date: new Date("2024-06-20"),
returned: false },
{ borrow_id: 4, member_id: 103, book_id: 204, date: new Date("2024-06-22"),
returned: true }
])

Find all books in the Self-Help genre

db.books.find({ genre: "Self-Help" })

Show members who joined after March 2024

db.members.find({ joined_on: { $gt: new Date("2024-03-31") } })


List all borrowed books that have not been returned

db.borrowed.find({ returned: false })


Display all books with fewer than 5 copies

db.books.find({ copies: { $lt: 5 } })



Get details of all books written by Cal Newport

db.books.find({ author: "Cal Newport" })


List all borrow records with book title and member name
db.borrowed.aggregate([
  {
    $lookup: {
      from: "books",
      localField: "book_id",
      foreignField: "book_id",
      as: "book_info"
    }
  },
  { $unwind: "$book_info" },
  {
    $lookup: {
      from: "members",
      localField: "member_id",
      foreignField: "member_id",
      as: "member_info"
    }
  },
  { $unwind: "$member_info" },
  {
    $project: {
      borrow_id: 1,
      member_name: "$member_info.name",
      book_title: "$book_info.title",
      date: 1,
      returned: 1
    }
  }
])


Find which member borrowed "Sapiens"

db.borrowed.aggregate([
  {
    $lookup: {
      from: "books",
      localField: "book_id",
      foreignField: "book_id",
      as: "book_info"
    }
  },
  { $unwind: "$book_info" },
  { $match: { "book_info.title": "Sapiens" } },
  {
    $lookup: {
      from: "members",
      localField: "member_id",
      foreignField: "member_id",
      as: "member_info"
    }
  },
  { $unwind: "$member_info" },
  {
    $project: {
      _id: 0,
      member_name: "$member_info.name"
    }
  }
])


Display all members along with the books they've borrowed

db.members.aggregate([
  {
    $lookup: {
      from: "borrowed",
      localField: "member_id",
      foreignField: "member_id",
      as: "borrow_info"
    }
  }
])


List members who have borrowed books and not returned them

db.borrowed.aggregate([
  { $match: { returned: false } },
  {
    $lookup: {
      from: "members",
      localField: "member_id",
      foreignField: "member_id",
      as: "member_info"
    }
  },
  { $unwind: "$member_info" },
  { $group: { _id: "$member_info.name" } }
])


Each book with how many times it has been borrowed

db.borrowed.aggregate([
  {
    $group: {
      _id: "$book_id",
      borrow_count: { $sum: 1 }
    }
  },
  {
    $lookup: {
      from: "books",
      localField: "_id",
      foreignField: "book_id",
      as: "book_info"
    }
  },
  { $unwind: "$book_info" },
  {
    $project: {
      title: "$book_info.title",
      borrow_count: 1
    }
  }
])

Books each member has borrowed

db.borrowed.aggregate([
  {
    $group: {
      _id: "$member_id",
      books_borrowed: { $sum: 1 }
    }
  }
])


Genre with highest number of books

db.books.aggregate([
  {
    $group: {
      _id: "$genre",
      total: { $sum: 1 }
    }
  },
  { $sort: { total: -1 } },
  { $limit: 1 }
])


Top 2 most borrowed books

db.borrowed.aggregate([
  {
    $group: {
      _id: "$book_id",
      count: { $sum: 1 }
    }
  },
  { $sort: { count: -1 } },
  { $limit: 2 },
  {
    $lookup: {
      from: "books",
      localField: "_id",
      foreignField: "book_id",
      as: "book_info"
    }
  },
  { $unwind: "$book_info" },
  {
    $project: {
      title: "$book_info.title",
      borrow_count: "$count"
    }
  }
])


Average number of copies per genre

db.books.aggregate([
  {
    $group: {
      _id: "$genre",
      avg_copies: { $avg: "$copies" }
    }
  }
])


Total books currently borrowed (not returned)

db.borrowed.aggregate([
  { $match: { returned: false } },
  { $count: "currently_borrowed" }
])


Add a new member without any borrow and list such members

db.members.insertOne({ member_id: 104, name: "Karan Mehta", joined_on: new Date("2024-07-01") })

db.members.aggregate([
  {
    $lookup: {
      from: "borrowed",
      localField: "member_id",
      foreignField: "member_id",
      as: "borrow_info"
    }
  },
  { $match: { borrow_info: { $eq: [] } } }
])


Books never borrowed

db.books.find({
  book_id: { $nin: db.borrowed.distinct("book_id") }
})


Members who borrowed more than one book

db.borrowed.aggregate([
  {
    $group: {
      _id: "$member_id",
      count: { $sum: 1 }
    }
  },
  { $match: { count: { $gt: 1 } } },
  {
    $lookup: {
      from: "members",
      localField: "_id",
      foreignField: "member_id",
      as: "member_info"
    }
  },
  { $unwind: "member_info" },
  {
    $project: {
      name: "$member_info.name",
      borrowed_count: "$count"
    }
  }
])


Borrowing trends by month

db.borrowed.aggregate([
  {
    $group: {
      _id: { $dateToString: { format: "%Y-%m", date: "$date" } },
      total_borrowed: { $sum: 1 }
    }
  },
  { $sort: { _id: 1 } }
])


Borrow records where book had < 5 copies at borrowing

db.borrowed.aggregate([
  {
    $lookup: {
      from: "books",
      localField: "book_id",
      foreignField: "book_id",
      as: "book_info"
    }
  },
  { $unwind: "$book_info" },
  { $match: { "book_info.copies": { $lt: 5 } } }
])


Simulate overdue books by adding a due_date and finding overdue records.

// Add due_date to each borrow (example)
 db.borrowed.updateMany({},
 { $set: { due_date: new Date("2024-07-10") } })

// Find overdue
db.borrowed.find({
  returned: false,
  due_date: { $lt: new Date() }
})


Create a chart-style output showing how many books are borrowed per genre.

db.borrowed.aggregate([
  {
    $lookup: {
      from: "books",
      localField: "book_id",
      foreignField: "book_id",
      as: "book_info"
    }
  },
  { $unwind: "$book_info" },
  {
    $group: {
      _id: "$book_info.genre",
      borrowed_count: { $sum: 1 }
    }
  },
  { $sort: { borrowed_count: -1 } }
])











