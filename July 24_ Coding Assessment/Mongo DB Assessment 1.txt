db.products.insertMany([
{ product_id: 1001, name: "Wireless Mouse", category: "Electronics", price: 750,
stock: 120 },
{ product_id: 1002, name: "Bluetooth Speaker", category: "Electronics", price: 2200,
stock: 80 },
{ product_id: 1003, name: "Yoga Mat", category: "Fitness", price: 599, stock: 150 },
{ product_id: 1004, name: "Office Chair", category: "Furniture", price: 7500, stock:
40 },
{ product_id: 1005, name: "Running Shoes", category: "Footwear", price: 3500, stock:
60 }
])


db.orders.insertMany([
{ order_id: 5001, customer: "Ravi Shah", product_id: 1001, quantity: 2, order_date:
new Date("2024-07-01") },
{ order_id: 5002, customer: "Sneha Mehta", product_id: 1002, quantity: 1,
order_date: new Date("2024-07-02") },
{ order_id: 5003, customer: "Arjun Verma", product_id: 1003, quantity: 3,
order_date: new Date("2024-07-03") },
{ order_id: 5004, customer: "Neha Iyer", product_id: 1001, quantity: 1, order_date:
new Date("2024-07-04") },
{ order_id: 5005, customer: "Mohit Jain", product_id: 1005, quantity: 2, order_date:
new Date("2024-07-05") }
])

Basic Queries

List all products in the Electronics category

db.products.find({ category: "Electronics" })


Find all orders placed by Ravi Shah

db.orders.find({ customer: "Ravi Shah" })


Show all orders placed after July 2, 2024

db.orders.find({ order_date: { $gt: new Date("2024-07-02") } })

Display products with stock less than 50

db.products.find({ stock: { $lt: 50 } })


Show all products that cost more than 2000

db.products.find({ price: { $gt: 2000 } })


Each order with product name and price

db.orders.aggregate([
  {
    $lookup: {
      from: "products",
      localField: "product_id",
      foreignField: "product_id",
      as: "product_info"
    }
  },
  { $unwind: "$product_info" },
  {
    $project: {
      order_id: 1,
      customer: 1,
      product_name: "$product_info.name",
      price: "$product_info.price",
      quantity: 1
    }
  }
])


Total amount spent by each customer (price × quantity)

db.orders.aggregate([
  {
    $lookup: {
      from: "products",
      localField: "product_id",
      foreignField: "product_id",
      as: "product_info"
    }
  },
  { $unwind: "$product_info" },
  {
    $group: {
      _id: "$customer",
      total_spent: {
        $sum: { $multiply: ["$quantity", "$product_info.price"] }
      }
    }
  }
])


List all orders with product category

db.orders.aggregate([
  {
    $lookup: {
      from: "products",
      localField: "product_id",
      foreignField: "product_id",
      as: "product_info"
    }
  },
  { $unwind: "$product_info" },
  {
    $project: {
      order_id: 1,
      customer: 1,
      category: "$product_info.category"
    }
  }
])


Customers who ordered any Fitness product

db.orders.aggregate([
  {
    $lookup: {
      from: "products",
      localField: "product_id",
      foreignField: "product_id",
      as: "product_info"
    }
  },
  { $unwind: "$product_info" },
  { $match: { "product_info.category": "Fitness" } },
  { $group: { _id: "$customer" } }
])


Total sales per product category

db.orders.aggregate([
  {
    $lookup: {
      from: "products",
      localField: "product_id",
      foreignField: "product_id",
      as: "product_info"
    }
  },
  { $unwind: "$product_info" },
  {
    $group: {
      _id: "$product_info.category",
      total_sales: {
        $sum: { $multiply: ["$quantity", "$product_info.price"] }
      }
    }
  }
])


Units sold per product

db.orders.aggregate([
  {
    $group: {
      _id: "$product_id",
      total_units_sold: { $sum: "$quantity" }
    }
  }
])


Average price of products per category

db.products.aggregate([
  {
    $group: {
      _id: "$category",
      avg_price: { $avg: "$price" }
    }
  }
])


Customer with largest single order (by amount)

db.orders.aggregate([
  {
    $lookup: {
      from: "products",
      localField: "product_id",
      foreignField: "product_id",
      as: "product_info"
    }
  },
  { $unwind: "$product_info" },
  {
    $project: {
      customer: 1,
      amount: { $multiply: ["$quantity", "$product_info.price"] }
    }
  },
  { $sort: { amount: -1 } },
  { $limit: 1 }
])


Top 3 products by number of orders

db.orders.aggregate([
  {
    $group: {
      _id: "$product_id",
      order_count: { $sum: 1 }
    }
  },
  { $sort: { order_count: -1 } },
  { $limit: 3 }
])


Day with highest number of orders

db.orders.aggregate([
  {
    $group: {
      _id: { $dateToString: { format: "%Y-%m-%d", date: "$order_date" } },
      order_count: { $sum: 1 }
    }
  },
  { $sort: { order_count: -1 } },
  { $limit: 1 }
])


Add a new customer and list customers with no orders

db.customers.insertOne({ name: "Priya Nair" })


db.customers.aggregate([
  {
    $lookup: {
      from: "orders",
      localField: "name",
      foreignField: "customer",
      as: "order_info"
    }
  },
  { $match: { order_info: { $eq: [] } } }
])




Add more orders & find customers with >1 order


db.orders.aggregate([
  {
    $group: {
      _id: "$customer",
      order_count: { $sum: 1 }
    }
  },
  { $match: { order_count: { $gt: 1 } } }
])

Products never ordered

db.products.find({
  product_id: { $nin: db.orders.distinct("product_id") }
})


Customers who ordered products with stock < 100

db.orders.aggregate([
  {
    $lookup: {
      from: "products",
      localField: "product_id",
      foreignField: "product_id",
      as: "product_info"
    }
  },
  { $unwind: "$product_info" },
  { $match: { "product_info.stock": { $lt: 100 } } },
  { $group: { _id: "$customer" } }
])


Total inventory value (price × stock)

db.products.aggregate([
  {
    $group: {
      _id: null,
      total_value: { $sum: { $multiply: ["$price", "$stock"] } }
    }
  }
])


